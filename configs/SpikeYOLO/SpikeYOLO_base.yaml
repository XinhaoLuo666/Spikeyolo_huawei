epochs: 500  # total train epochs
per_batch_size: 8  # 16 * 8 = 128
img_size: 640
iou_thres: 0.7
conf_free: True
sync_bn: True
opencv_threads_num: 0  # opencv: disable threading optimizations

network:
  model_name: yolov8
  nc: 80  # number of classes
  reg_max: 16

  stride: [8, 16, 32]

  # YOLOv8.0n backbone
#  backbone:
#    # [from, repeats, module, args]
#    - [-1, 1, ConvNormAct, [64, 3, 2]]  # 0-P1/2
#    - [-1, 1, ConvNormAct, [128, 3, 2]]  # 1-P2/4
#    - [-1, 3, C2f, [128, True]]
#    - [-1, 1, ConvNormAct, [256, 3, 2]]  # 3-P3/8
#    - [-1, 6, C2f, [256, True]]
#    - [-1, 1, ConvNormAct, [512, 3, 2]]  # 5-P4/16
#    - [-1, 6, C2f, [512, True]]
#    - [-1, 1, ConvNormAct, [1024, 3, 2]]  # 7-P5/32
#    - [-1, 3, C2f, [1024, True]]
#    - [-1, 1, SPPF, [1024, 5]]  # 9
#
#  # YOLOv8.0n head
#  head:
#    - [-1, 1, Upsample, [None, 2, 'nearest']]
#    - [[-1, 6], 1, Concat, [1]]  # cat backbone P4
#    - [-1, 3, C2f, [512]]  # 12
#
#    - [-1, 1, Upsample, [None, 2, 'nearest']]
#    - [[-1, 4], 1, Concat, [1] ]  # cat backbone P3
#    - [-1, 3, C2f, [256]]  # 15 (P3/8-small)
#
#    - [-1, 1, ConvNormAct, [256, 3, 2]]
#    - [[ -1, 12], 1, Concat, [1]]  # cat head P4
#    - [-1, 3, C2f, [512]]  # 18 (P4/16-medium)
#
#    - [-1, 1, ConvNormAct, [512, 3, 2]]
#    - [[-1, 9], 1, Concat, [1]]  # cat head P5
#    - [-1, 3, C2f, [1024]]  # 21 (P5/32-large)
#
#    - [[15, 18, 21], 1, YOLOv8Head, [nc, reg_max, stride]]  # Detect(P3, P4, P5)


  backbone:
    -  [-1, 1, MS_GetT, [3,1]]  #仅用于增加T               #0 [1,3,256,256]->[1,1,3,256,256]
    -  [-1, 1, MS_DownSampling, [128, 7, 4, 2, True]]     #1 [1,1,3,256,256]->[1,1,128,64,64]  第一处改动
    -  [-1, 3, MS_AllConvBlock, [4,7]]                        #2 [1,1,128,64,64]->[1,1,128,64,64]
    -  [-1, 1, MS_DownSampling, [256, 3, 2, 1, False]]   #3 [1,1,128,64,64]->[1,1,256,32,32]
    -  [-1, 6, MS_AllConvBlock, [4,7]]                        #4 [1,1,256,32,32]->[1,1,256,32,32]
    -  [-1, 1, MS_DownSampling, [512, 3, 2, 1, False]]   #5 [1,1,256,32,32]->[1,1,512,16,16]
    -  [-1, 9, MS_ConvBlock, [3,7]]                         #6 [1,1,512,16,16]->[1,1,512,16,16]
    -  [-1, 1, MS_DownSampling, [1024, 3, 2, 1, False]]  #7 [1,1,512,16,16]->[1,1,1024,8,8]
    -  [-1, 3, MS_ConvBlock, [2,7]]                         #8 [1,1,1024,8,8]->[1,1,1024,8,8]
    -  [-1, 1, SpikeSPPF, [1024, 5]]                        #9 [1,1024,8,8]->[1,1024,8,8]



  head:
    - [-1, 1, MS_StandardConv, [512,1,1]]                   #10 [1,1,1024,8,8]->[1,1,512,8,8]  #
    -  [-1, 1, Upsample, [None, '(1.0,2.0,2.0)', 'nearest']]   #11 [1,1,512,8,8]->[1,1,512,16,16]
    -  [ -1, 1, MS_ConvBlock, [3,7]]                          #12 [1,1,512,16,16]->[1,1,512,16,16]
    -  [[-1, 6], 1, Concat, [2]]  # cat backbone P4         #13 [1,1,512,16,16]+[1,1,512,16,16] == [1,1,1024,16,16]  #二者均受wider系数操控

    -  [-1, 1, MS_StandardConv, [256,1,1]]                  #14 [1,1,1024,16,16]->[1,1,256,16,16]
    - [-1, 1, Upsample, [None, '(1.0,2.0,2.0)', 'nearest']]   #15 [1,1,256,16,16]->[1,1,256,32,32]
    -  [-1, 1, MS_AllConvBlock, [4,7]]                   #15.5 [1,1,256,16,16]->[1,1,256,16,16]

    -  [[-1, 4], 1, Concat, [2]]  # cat backbone P3         #16 [1,1,256,32,32]+[1,1,256,32,32] == [1,1,512,32,32]
    -  [-1, 1, MS_StandardConv, [256,1,1]]                  #17 [1,1,512,32,32]->[1,1,256,32,32]
    -  [-1, 1, MS_AllConvBlock, [4,7]]                           #18 [1,1,256,32,32]->[1,1,256,32,32]   输出层

    -  [-1, 1, MS_StandardConv, [256,3,2]]                  #19 [1,1,256,32,32]->[1,1,256,16,16]
    -  [[-1, 14], 1, Concat, [2]]  # cat head P4            #20  [1,1,256,16,16]+[1,1,256,16,16] == [1,1,512,16,16]
    -  [-1, 1, MS_ConvBlock, [3,7]]                           #21 [1,1,512,16,16]->[1,1,512,16,16]     输出层


    -  [-1, 1, MS_StandardConv, [512,3,2]]                  #22 [1,1,512,16,16]->[1,1,512,8,8]
    -  [[-1, 10], 1, Concat, [2]]  # cat head P5             #23 [1,1,512,8,8]+[1,1,512,8,8] == [1,1,1024,8,8]
    -  [-1, 1, MS_ConvBlock, [1,7]]   # 23 (P5/32-large)      #24 [1,1,1024,8,8]->[1,1,1024,8,8]  输出层             #C3层实际输出通道数为args[0]*缩放系数

    -  [[19, 22, 25], 1, SpikeDetect, [nc]]            #25 [1,1,1024,8,8]->[1,3,32,32,25] and [1,3,16,16,25] and [1,3,8,8,25]   # Detect(P3, P4, P5)

